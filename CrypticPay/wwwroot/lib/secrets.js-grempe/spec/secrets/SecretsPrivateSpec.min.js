/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/secrets.js-grempe@2.0.0/spec/secrets/SecretsPrivateSpec.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("Secrets private function",(function(){"use strict";describe("padLeft()",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("without specifying bits of padding it should default to config.bits",(function(){secrets.init(10);var t="abc123";expect(secrets._padLeft(t)).toEqual("0000abc123"),expect(secrets._padLeft(t).length).toEqual(10)})),it("with null bits of padding it should default to config.bits",(function(){secrets.init(10);var t="abc123";expect(secrets._padLeft(t,null)).toEqual("0000abc123"),expect(secrets._padLeft(t,null).length).toEqual(10)})),it("with zero bits of padding",(function(){var t="abc123";expect(secrets._padLeft(t,0)).toEqual("abc123"),expect(secrets._padLeft(t,0).length).toEqual(6)})),it("with 1 bit of padding",(function(){var t="abc123";expect(secrets._padLeft(t,1)).toEqual("abc123"),expect(secrets._padLeft(t,1).length).toEqual(6)})),it("with a value that is shorter than bits",(function(){var t="abc123";expect(secrets._padLeft(t,32)).toEqual("00000000000000000000000000abc123"),expect(secrets._padLeft(t,32).length).toEqual(32)})),it("with a value that is equal in size to bits",(function(){var t="01234567890123456789012345678901";expect(secrets._padLeft(t,32)).toEqual("01234567890123456789012345678901"),expect(secrets._padLeft(t,32).length).toEqual(32)})),it("with a value that is larger than bits",(function(){var t="0123456789012345678901234567890123456789";expect(secrets._padLeft(t,32)).toEqual("0000000000000000000000000123456789012345678901234567890123456789"),expect(secrets._padLeft(t,32).length).toEqual(64)})),it("with bits set to the max of 1024",(function(){expect(secrets._padLeft("0123456789012345678901234567890123456789",1024).length).toEqual(1024)})),it("unless bits set greater than the max of 1024",(function(){expect((function(){secrets._padLeft("abc123",1025)})).toThrowError("Padding must be multiples of no larger than 1024 bits.")}))})),describe("hex2bin()",(function(){})),describe("bin2hex()",(function(){})),describe("getRNG()",(function(){})),describe("isSetRNG()",(function(){})),describe("splitNumStringToIntArray()",(function(){})),describe("horner()",(function(){})),describe("lagrange()",(function(){})),describe("getShares()",(function(){})),describe("constructPublicShareString()",(function(){it("should construct a well formed 3 bit share",(function(){expect(secrets._constructPublicShareString(3,1,"ffff")).toEqual("31ffff")})),it("should construct a well formed 8 bit share",(function(){expect(secrets._constructPublicShareString(8,1,"ffff")).toEqual("801ffff")})),it("should construct a well formed 20 bit share",(function(){expect(secrets._constructPublicShareString(20,1024,"ffff")).toEqual("K01024ffff")})),it("should construct a well formed 20 bit share with bits as a string",(function(){expect(secrets._constructPublicShareString("20",1024,"ffff")).toEqual("K01024ffff")})),it("should construct a well formed 20 bit share with ID as a string",(function(){expect(secrets._constructPublicShareString(20,"1024","ffff")).toEqual("K01024ffff")})),it("unless id < 1",(function(){expect((function(){secrets._constructPublicShareString(8,0,"ffff")})).toThrowError("Share id must be an integer between 1 and 255, inclusive.")})),it("unless id > 255",(function(){expect((function(){secrets._constructPublicShareString(8,256,"ffff")})).toThrowError("Share id must be an integer between 1 and 255, inclusive.")}))}))}));
//# sourceMappingURL=/sm/c0e9a6636777fe57c78786247ed6732c1751271c8145dcb113cd53c52c27aac2.map