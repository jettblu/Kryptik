/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /npm/secrets.js-grempe@2.0.0/spec/secrets/SecretsSpec.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
describe("Secrets",(function(){"use strict";describe("should be able to complete a simple end-to-end test",(function(){it("with ASCII text",(function(){expect(secrets.hex2str(secrets.combine(secrets.share(secrets.str2hex("foo"),3,2)))).toEqual("foo")})),it("with UTF-8 text",(function(){var e="¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹";expect(secrets.hex2str(secrets.combine(secrets.share(secrets.str2hex(e),3,2)))).toEqual(e)}))})),describe("should be able to be initialized",(function(){var e;beforeEach((function(){secrets.init(),secrets.setRNG("testRandom"),e=secrets.random(128)})),it("with an empty arg, which should be 8 bits",(function(){secrets.init(),expect(secrets.getConfig().bits).toEqual(8),expect(secrets.combine(secrets.share(e,3,2))).toEqual(e)})),it("with an arg of 8, which should be 8 bits",(function(){secrets.init(8),expect(secrets.getConfig().bits).toEqual(8),expect(secrets.combine(secrets.share(e,3,2))).toEqual(e)})),it("with an min arg of 3, which should be 3 bits",(function(){secrets.init(3),expect(secrets.getConfig().bits).toEqual(3),expect(secrets.combine(secrets.share(e,3,2))).toEqual(e)})),it("with an max arg of 20, which should be 20 bits",(function(){secrets.init(20),expect(secrets.getConfig().bits).toEqual(20),expect(secrets.combine(secrets.share(e,500,2))).toEqual(e)})),it("with an null arg, which should be 8 bits",(function(){secrets.init(null),expect(secrets.getConfig().bits).toEqual(8),expect(secrets.combine(secrets.share(e,3,2))).toEqual(e)})),it("with an undefined arg, which should be 8 bits",(function(){secrets.init(void 0),expect(secrets.getConfig().bits).toEqual(8),expect(secrets.combine(secrets.share(e,3,2))).toEqual(e)})),it("unless the arg is a number less than 3",(function(){expect((function(){secrets.init(2)})).toThrowError("Number of bits must be an integer between 3 and 20, inclusive.")})),it("unless the arg is a number greater than 20",(function(){expect((function(){secrets.init(21)})).toThrowError("Number of bits must be an integer between 3 and 20, inclusive.")}))})),describe("should return its own config with getConfig()",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("with no args to init",(function(){var e;e={radix:16,bits:8,maxShares:255,hasCSPRNG:!0,typeCSPRNG:"testRandom"},expect(secrets.getConfig()).toEqual(e)})),it("with 16 bits arg to init",(function(){var e;e={radix:16,bits:16,maxShares:65535,hasCSPRNG:!0,typeCSPRNG:"testRandom"},secrets.init(16,"testRandom"),expect(secrets.getConfig()).toEqual(e)}))})),describe("should be able to be created specifying Random Number Generator with setRNG()",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("when its a string that is a valid RNG type",(function(){"object"==typeof crypto&&"function"==typeof crypto.randomBytes?(secrets.setRNG("nodeCryptoRandomBytes"),expect(secrets.getConfig().typeCSPRNG).toEqual("nodeCryptoRandomBytes")):(secrets.setRNG("browserCryptoGetRandomValues"),expect(secrets.getConfig().typeCSPRNG).toEqual("browserCryptoGetRandomValues"))})),it("when its a function accepts a 'bits' arg and returns a bits length string of binary digits",(function(){secrets.setRNG((function(e){return function(e){var t=new Uint32Array(1);return t[0]=123456789,t[0].toString(2).substr(0,e)}(e)})),expect(secrets.random(128)).toEqual("75bcd15")})),it("when that function accepts a 'bits' arg and returns a bits length string of binary digits",(function(){secrets.setRNG((function(e){return function(e){var t=new Uint32Array(1);return t[0]=123456789,t[0].toString(2).substr(0,e)}(e)})),expect(secrets.random(128)).toEqual("75bcd15")})),it("unless the arg is a string that is not a valid RNG type",(function(){expect((function(){secrets.setRNG("FOO")})).toThrowError("Invalid RNG type argument : 'FOO'")})),it("unless that function does not return a string as output",(function(){expect((function(){secrets.setRNG((function(e){return function(e){return["not","a","string",e]}(e)}))})).toThrowError("Random number generator is invalid (Output is not a string). Supply an CSPRNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's.")})),it("unless that function does not return a string of parseable binary digits as output",(function(){expect((function(){secrets.setRNG((function(e){return"abcdef"}))})).toThrowError("Random number generator is invalid (Binary string output not parseable to an Integer). Supply an CSPRNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's.")})),it("unless that function returns a string longer than config bits",(function(){expect((function(){secrets.setRNG((function(e){return"001010101"}))})).toThrowError("Random number generator is invalid (Output length is greater than config.bits). Supply an CSPRNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's.")})),it("unless that function returns a string shorter than config bits",(function(){expect((function(){secrets.setRNG((function(e){return"0010101"}))})).toThrowError("Random number generator is invalid (Output length is less than config.bits). Supply an CSPRNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's.")}))})),describe("should be able to be shared",(function(){var e;beforeEach((function(){secrets.init(),secrets.setRNG("testRandom"),e=secrets.random(128)})),it("into 'numShares' shares and retain leading zeros where the key has leading zeros",(function(){e="000000000000000123";var t=secrets.share(e,10,5);expect(t.length).toEqual(10),expect(secrets.combine(t)).toEqual(e)})),it("into 'numShares' shares and retain leading zeros where the key had leading zeros and was converted to hex",(function(){e="0000000 is the password";var t=secrets.share(secrets.str2hex(e),10,5);expect(t.length).toEqual(10),expect(secrets.hex2str(secrets.combine(t))).toEqual(e)})),it("into 'numShares' shares where numShares is greater than the threshold",(function(){var t=secrets.share(e,10,5);expect(t.length).toEqual(10)})),it("into 'numShares' shares where numShares is equal to the threshold",(function(){var t=secrets.share(e,10,10);expect(t.length).toEqual(10)})),it("into 'numShares' shares where numShares is equal to the threshold and zero-padding is set",(function(){var t=secrets.share(e,10,10),s=secrets.share(e,10,10,1024);expect(t.length).toEqual(10),expect(s.length).toEqual(10),expect(s[0].length).toBeGreaterThan(t[0].length)})),it("unless 'numShares' is less than the threshold",(function(){expect((function(){secrets.share(e,2,3)})).toThrowError("Threshold number of shares was 3 but must be less than or equal to the 2 shares specified as the total to generate.")})),it("unless 'numShares' is less than 2",(function(){expect((function(){secrets.share(e,1,2)})).toThrowError("Number of shares must be an integer between 2 and 2^bits-1 (255), inclusive.")})),it("unless 'numShares' is greater than 255",(function(){expect((function(){secrets.share(e,256,2)})).toThrowError("Number of shares must be an integer between 2 and 2^bits-1 (255), inclusive. To create 256 shares, use at least 9 bits.")})),it("unless 'threshold' is less than 2",(function(){expect((function(){secrets.share(e,2,1)})).toThrowError("Threshold number of shares must be an integer between 2 and 2^bits-1 (255), inclusive.")})),it("unless 'threshold' is greater than 255",(function(){expect((function(){secrets.share(e,255,256)})).toThrowError("Threshold number of shares must be an integer between 2 and 2^bits-1 (255), inclusive.  To use a threshold of 256, use at least 9 bits.")})),it("unless 'key' is not in the expected hex format",(function(){e="xyz123",expect((function(){secrets.share(e,3,2)})).toThrowError("Invalid hex character.")})),it("unless 'key' is not a string",(function(){e={foo:"bar"},expect((function(){secrets.share(e,3,2)})).toThrowError("Secret must be a string.")})),it("unless 'padLength' is not a number",(function(){expect((function(){secrets.share(e,3,2,"foo")})).toThrowError("Zero-pad length must be an integer between 0 and 1024 inclusive.")})),it("unless 'padLength' is not a whole number",(function(){expect((function(){secrets.share(e,3,2,1.3)})).toThrowError("Zero-pad length must be an integer between 0 and 1024 inclusive.")})),it("unless 'padLength' is < 0",(function(){expect((function(){secrets.share(e,3,2,-1)})).toThrowError("Zero-pad length must be an integer between 0 and 1024 inclusive.")})),it("unless 'padLength' is > 1024",(function(){expect((function(){secrets.share(e,3,2,1025)})).toThrowError("Zero-pad length must be an integer between 0 and 1024 inclusive.")}))})),describe("should be able to be combined to recreate a secret",(function(){var e,t,s;beforeEach((function(){secrets.init(),secrets.setRNG("testRandom"),e=secrets.random(128),10,t=5,s=secrets.share(e,10,t)})),it("from a full set of version 0.1.8 *known* good shares for full backwards compatibility",(function(){var e=secrets.combine(["80111001e523b02029c58aceebead70329000","802eeb362b5be82beae3499f09bd7f9f19b1c","803d5f7e5216d716a172ebe0af46ca81684f4","804e1fa5670ee4c919ffd9f8c71f32a7bfbb0","8050bd6ac05ceb3eeffcbbe251932ece37657","8064bb52a3db02b1962ff879d32bc56de4455","8078a5f11d20cbf8d907c1d295bbda1ee900a","808808ff7fae45529eb13b1e9d78faeab435f","809f3b0585740fd80830c355fa501a8057733","80aeca744ec715290906c995aac371ed118c2"]);expect(e).toEqual("82585c749a3db7f73009d0d6107dd650")})),it("from a full set of shares",(function(){var t=secrets.combine(s);expect(t).toEqual(e)})),it("from a full set of zero-padded shares",(function(){var t=secrets.share(e,3,2,1024),s=secrets.combine(t);expect(s).toEqual(e)})),it("from a full set of shares with a full set of duplicates",(function(){var t=secrets.combine(s.concat(s));expect(t).toEqual(e)})),it("from a threshold minimum set of shares",(function(){var n=secrets.combine(s.slice(0,t));expect(n).toEqual(e)})),it("unless given less than the threshold minimum set of shares",(function(){var n=secrets.combine(s.slice(0,t-1));expect(n).not.toEqual(e)})),it("unless given an empty set of shares",(function(){var t=secrets.combine([]);expect(t).not.toEqual(e)})),it("unless given a null in place of shares",(function(){var t=secrets.combine([]);expect(t).not.toEqual(e)})),xit("unless given a share which was not part of the original set of shares",(function(){var t=secrets.random(10),n=secrets.share(t,3,2);s.push(n[0]);var r=secrets.combine(s);expect(r).not.toEqual(e)})),it("unless given a malformed share",(function(){s.push("abc123"),expect((function(){secrets.combine(s)})).toThrowError("Invalid share : Share id must be an integer between 1 and 255, inclusive.")}))})),describe("should be able to generate a new share to add to an existing set",(function(){var e;beforeEach((function(){secrets.init(),secrets.setRNG("testRandom"),e=secrets.random(128)})),it("when newShare() is provided with only the minimum original shares required",(function(){var t=secrets.share(e,5,2),s=secrets.newShare(6,t.slice(0,2)),n=secrets.combine(t.slice(0,1).concat(s));expect(n).toEqual(e)})),it("and combine the mixed old/new shares back to the original key with ID arg as number",(function(){var t=secrets.share(e,3,2),s=secrets.newShare(4,t),n=secrets.combine(t.slice(1).concat(s));expect(n).toEqual(e)})),it("and combine the mixed old/new shares back to the original key with ID arg as string",(function(){var t=secrets.share(e,3,2),s=secrets.newShare("4",t),n=secrets.combine(t.slice(1).concat(s));expect(n).toEqual(e)})),it("and combine the mixed old/new shares back to the original key with ID arg as a float",(function(){var t=secrets.share(e,3,2),s=secrets.newShare(1.3,t),n=secrets.combine(t.slice(1).concat(s));expect(n).toEqual(e)})),it("unless ID arg is < 1",(function(){var t=secrets.share(e,3,2);expect((function(){secrets.newShare(0,t)})).toThrowError("Invalid 'id' or 'shares' Array argument to newShare().")})),it("unless ID arg is > 255 for 8 bit config",(function(){var t=secrets.share(e,3,2);expect((function(){secrets.newShare(256,t)})).toThrowError("Share id must be an integer between 1 and 255, inclusive.")}))})),describe("should be able to round trip convert a string to/from Hex for sharing",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("if the string is plain ASCII text",(function(){var e="acbdefghijklmnopqrstuvwxyz0123456789",t=secrets.share(secrets.str2hex(e),3,2),s=secrets.hex2str(secrets.combine(t));expect(s).toEqual(e)})),it("if the string is UTF-8 text",(function(){var e="¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹",t=secrets.share(secrets.str2hex(e),3,2),s=secrets.hex2str(secrets.combine(t));expect(s).toEqual(e)})),it("if the string is UTF-16 text",(function(){var e="𐑡𐑹𐑡 ·𐑚𐑻𐑯𐑸𐑛 ·𐑖𐑷",t=secrets.share(secrets.str2hex(e),3,2),s=secrets.hex2str(secrets.combine(t));expect(s).toEqual(e)})),it("unless str2hex is called with a non-string",(function(){expect((function(){secrets.str2hex([])})).toThrowError("Input must be a character string.")})),it("unless str2hex bytesPerChar arg is non-Integer",(function(){expect((function(){secrets.str2hex("abc","foo")})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")})),it("unless str2hex bytesPerChar arg is < 1",(function(){expect((function(){secrets.str2hex("abc",-1)})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")})),it("unless str2hex bytesPerChar arg is > 6",(function(){expect((function(){secrets.str2hex("abc",7)})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")})),it("unless hex2str is called with a non-string",(function(){expect((function(){secrets.hex2str([])})).toThrowError("Input must be a hexadecimal string.")})),it("unless hex2str bytesPerChar arg is non-Integer",(function(){expect((function(){secrets.hex2str("abc","foo")})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")})),it("unless hex2str bytesPerChar arg is < 1",(function(){expect((function(){secrets.hex2str("abc",-1)})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")})),it("unless hex2str bytesPerChar arg is > 6",(function(){expect((function(){secrets.hex2str("abc",7)})).toThrowError("Bytes per character must be an integer between 1 and 6, inclusive.")}))})),describe("should be able to generate a random Hex string",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("with valid Hex chars 0-9 and a-f",(function(){var e=secrets.random(128);expect(e).toMatch(/^[a-f0-9]+$/)})),it("of 2 bit length",(function(){var e=secrets.random(2);expect(e.length).toEqual(1)})),it("of 128 bit length",(function(){var e=secrets.random(128);expect(e.length).toEqual(32)})),it("of 512 bit length",(function(){var e=secrets.random(512);expect(e.length).toEqual(128)})),it("unless bitlength is less than 2",(function(){expect((function(){secrets.random(1)})).toThrowError("Number of bits must be an Integer between 1 and 65536.")})),it("unless bitlength is greater than than 65536",(function(){expect((function(){secrets.random(65537)})).toThrowError("Number of bits must be an Integer between 1 and 65536.")}))})),describe("should be able to do conversions",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("from a known binary string to a known hex output",(function(){expect(secrets._bin2hex("00110101110001100110001011011111111100110000011111110000010010010011101001000000111010001111000111001110011000011101111111011111010111100111011100110101010000110110010101110010110101010101100000110010000010001000110101110010011110100111001010010100011001110110001010000000110000111110011100101111111110100001011100000110000101101000011100101000000100000111001010110100011001110100110001000010000011101100001111100011001001110101101100101011011101010110010100010110111000001010000000001110000010110100000010111101")).toEqual("35c662dff307f0493a40e8f1ce61dfdf5e7735436572d55832088d727a7294676280c3e72ffa17061687281072b4674c420ec3e3275b2b756516e0a00e0b40bd")})),it("from a known hex string to a known binary output",(function(){expect(secrets._hex2bin("35c662dff307f0493a40e8f1ce61dfdf5e7735436572d55832088d727a7294676280c3e72ffa17061687281072b4674c420ec3e3275b2b756516e0a00e0b40bd")).toEqual})),it("from an ASCII String > Hex > Binary > Hex > ASCII String round trip",(function(){var e="I want to play safely!",t=secrets.str2hex(e),s=secrets._hex2bin(t),n=secrets._bin2hex(s);expect(secrets.hex2str(n)).toEqual(e)})),it("from an UTF-8 String > Hex > Binary > Hex > UTF-8 String round trip",(function(){var e="¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹",t=secrets.str2hex(e),s=secrets._hex2bin(t),n=secrets._bin2hex(s);expect(secrets.hex2str(n)).toEqual(e)})),it("from an UTF-16 String > Hex > Binary > Hex > UTF-16 String round trip",(function(){var e="𐑡𐑹𐑡 ·𐑚𐑻𐑯𐑸𐑛 ·𐑖𐑷",t=secrets.str2hex(e),s=secrets._hex2bin(t),n=secrets._bin2hex(s);expect(secrets.hex2str(n)).toEqual(e)})),it("unless a non binary character is passed to bin2hex",(function(){expect((function(){secrets._bin2hex("000100019999")})).toThrowError("Invalid binary character.")}))})),describe("share data should be able to be extracted",(function(){beforeEach((function(){secrets.init(),secrets.setRNG("testRandom")})),it("when 8 bit shares are created",(function(){var e=["8013ac6c71ce163b661fa6ac8ce0141885ebee425222f1f07d07cad2e4a63f995b7","80274919338dfc671c2e9d78d2e02140d0d61624a245ea20e0ff8e45c0dc68f37a8","8034e5754243ea5c7a313bc45850327853cdfeb6f2671c909b184287230a556a256"];expect(secrets.extractShareComponents(e[0]).bits).toEqual(8),expect(secrets.extractShareComponents(e[0]).id).toEqual(1),expect(secrets.extractShareComponents(e[0]).data).toEqual("3ac6c71ce163b661fa6ac8ce0141885ebee425222f1f07d07cad2e4a63f995b7"),expect(secrets.extractShareComponents(e[1]).bits).toEqual(8),expect(secrets.extractShareComponents(e[1]).id).toEqual(2),expect(secrets.extractShareComponents(e[1]).data).toEqual("74919338dfc671c2e9d78d2e02140d0d61624a245ea20e0ff8e45c0dc68f37a8"),expect(secrets.extractShareComponents(e[2]).bits).toEqual(8),expect(secrets.extractShareComponents(e[2]).id).toEqual(3),expect(secrets.extractShareComponents(e[2]).data).toEqual("4e5754243ea5c7a313bc45850327853cdfeb6f2671c909b184287230a556a256")})),it("when 1000 20 bit shares are created",(function(){var e="K003e88f72b74da4a55404d3abd1dc9a44199d50fd27e79cf974633fe1eae164d91b022";expect(secrets.extractShareComponents(e).bits).toEqual(20),expect(secrets.extractShareComponents(e).id).toEqual(1e3),expect(secrets.extractShareComponents(e).data).toEqual("8f72b74da4a55404d3abd1dc9a44199d50fd27e79cf974633fe1eae164d91b022")})),it("when 20 bit shares are created",(function(){var e=["K000019359d6ab1e44238b75ef84d1cba6e16b4c36ba325d539c82cb147403c8765c951","K0000226b33d563c884706ebd739a9e744abdd88660462baaee90ebf22d80e00eab9279","K00003b5eaebfd22cc648d9e38ad7e7ce56ab034566e52e7fa358a9430bc0ab89ee5b61"];expect(secrets.extractShareComponents(e[0]).bits).toEqual(20),expect(secrets.extractShareComponents(e[0]).id).toEqual(1),expect(secrets.extractShareComponents(e[0]).data).toEqual("9359d6ab1e44238b75ef84d1cba6e16b4c36ba325d539c82cb147403c8765c951"),expect(secrets.extractShareComponents(e[1]).bits).toEqual(20),expect(secrets.extractShareComponents(e[1]).id).toEqual(2),expect(secrets.extractShareComponents(e[1]).data).toEqual("26b33d563c884706ebd739a9e744abdd88660462baaee90ebf22d80e00eab9279"),expect(secrets.extractShareComponents(e[2]).bits).toEqual(20),expect(secrets.extractShareComponents(e[2]).id).toEqual(3),expect(secrets.extractShareComponents(e[2]).data).toEqual("b5eaebfd22cc648d9e38ad7e7ce56ab034566e52e7fa358a9430bc0ab89ee5b61")})),it("unless the share is in an invalid format",(function(){expect((function(){secrets.extractShareComponents("Zabc123")})).toThrowError("Invalid share : Number of bits must be an integer between 3 and 20, inclusive.")}))}))}));
//# sourceMappingURL=/sm/1628c31e37f602e3f24fa9bde07af3389e175919023d2a08ec02d6912b9b1789.map